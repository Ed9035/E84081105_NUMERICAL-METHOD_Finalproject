#!/usr/bin/env python
# coding: utf-8

# In[4]:


import numpy as np
import sys
import importlib
import tkinter.messagebox
import cv2 
from tkinter import *
from tkinter import filedialog,font
from PIL import ImageTk, Image


button_click=False


def detect_face():
        global file,label,button_click
        button_click=True
        image = cv2.imread(image_path)
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        Cascade = cv2.CascadeClassifier(r'./haarcascade_frontalface_default.xml')
        faces = Cascade.detectMultiScale(gray,scaleFactor=1.2,minNeighbors=5,minSize=(5,5)
                                         ,flags=cv2.IMREAD_GRAYSCALE)
        
        if(len(faces)<1):
            tkinter.messagebox.showerror('error', '未識別出人臉,請重新選擇圖片!')
            
        else:
            for (a, b, c, d) in faces:
                cv2.rectangle(image,(a,b),(a+c,b+c),(255,0,0),2)
            image = Image.fromarray(cv2.cvtColor(image,cv2.COLOR_BGR2RGB))
            file = image
            show(image)
            
            
        label=Label(master, text="find {0} faces!".format(len(faces)),font=('Arial','11',"bold"))    
        label.grid(row=0, column=1,sticky=S,padx=5, pady=35)
        cv2.waitKey(0)
        importlib.reload(sys)


def show(photo):
    photo=photo.resize((400,400),Image.ANTIALIAS)
    photo = ImageTk.PhotoImage(photo)
    output_img.configure(image=photo)
    output_img.image = photo
    
    
def save():
    global file
    file_path = filedialog.asksaveasfilename(title='保存文件', filetypes=[("PNG", ".png"),('JPG files','*.jpg')])
    file.save(str(file_path) + '.jpg')
    
    

def select():

    global input_img, output_img, image_path
    path = filedialog.askopenfilename()
    image_path = path
    photo = cv2.cvtColor(cv2.imread(path), cv2.COLOR_BGR2RGB)
    
    ip = Image.fromarray(photo)
    op = Image.fromarray(photo)
    
    ip = ImageTk.PhotoImage(ip.resize((150, 150),Image.ANTIALIAS))
    op = ImageTk.PhotoImage(op.resize((400, 400),Image.ANTIALIAS))
    
    
    input_img = Label(frame_l,image=ip)
    input_img.image = ip
    input_img.grid(row=0, column=0, padx=10, pady=10)
     
    output_img = Label(frame_r,image=op)
    output_img.image = op
    output_img.grid(row=0, column=0, padx=10, pady=10)


def remove_bg(img,BLUR,CANNY_THRESH_1,CANNY_THRESH_2, MASK_DILATE_ITER,MASK_ERODE_ITER,MASK_COLOR=(0, 0, 1)):
    
    gray  = cv2. cvtColor (img, cv2.COLOR_BGR2GRAY)
    edges = cv2. Canny (gray, CANNY_THRESH_1, CANNY_THRESH_2)
    edges = cv2. dilate (edges, None)
    edges = cv2. erode (edges, None)
    
    contour_info = []
    contours, _  = cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)
    
    for c in contours:
        contour_info.append((c,cv2.isContourConvex(c),cv2.contourArea(c)))
        
    contour_info = sorted (contour_info, key=lambda c: c[2], reverse=True)
    max_contour = contour_info[0]
    mask = np.zeros (edges.shape)
    cv2.fillConvexPoly(mask, max_contour[0], (255))
    mask = cv2.dilate(mask, None, iterations=MASK_DILATE_ITER)
    mask= cv2.erode (mask, None,iterations=MASK_ERODE_ITER)
    mask = cv2.GaussianBlur(mask, (BLUR, BLUR), 0)
    mask_stack = np.dstack([mask]*3)
    mask_stack = mask_stack.astype('float32') / 255.0
    img = img.astype('float32') / 255.0
    masked = (mask_stack * img) + ((1-mask_stack) * MASK_COLOR)
    masked = (masked * 255) .astype('uint8')
    c_blue, c_green, c_red = cv2.split (img)
    img_a = cv2.merge((c_red, c_green, c_blue, mask.astype('float32') / 255.0))
    return img_a.astype ("float32") * 255   
    
def remove():

    global file,label,button_click
    
    if button_click==True:
        label.grid_remove()
        button_click=False 
        
    img = cv2.imread(image_path)
    img_fin = remove_bg(img,BLUR=21,CANNY_THRESH_1=50,CANNY_THRESH_2=70
                        ,MASK_DILATE_ITER=10,MASK_ERODE_ITER=6)
    cv2.imwrite("C:/Users/user/Pictures/background_remove_image.png",cv2.cvtColor (img_fin, cv2.COLOR_RGBA2BGRA))
    tkinter.messagebox.showinfo('message', '去背完成,並已儲存至電腦(圖片)!')
    
    
def grayscale():
    
    global file,label,button_click
    
    if button_click==True:
        label.grid_remove()
        button_click=False
        
    photo = np.array(cv2.imread(image_path))
    
    for i in range (len(photo)):
        for j in range (len(photo[i])):
            grayScale = photo[i,j,2]*0.299+photo[i,j,1]*0.587+photo[i,j,0]*0.114
            photo[i,j]=grayScale
            
    gray=Image.fromarray(photo)
    file = gray
    show(gray)
    
    
    
def sepia():
    
    global file,label,button_click
    
    if button_click==True:
        label.grid_remove()
        button_click=False
        
    gray = cv2.cvtColor(cv2.imread(image_path), cv2.COLOR_BGR2GRAY)
    normalized_gray = np.array(gray, np.float32)
    normalized_gray = normalized_gray/255
    sepia = np.ones(cv2.imread(image_path).shape)
    
    for i in range(3):
        sepia[:, :, i] = (150+50*i) * normalized_gray 
        
    image = Image.fromarray(cv2.cvtColor(np.array(sepia, np.uint8), cv2.COLOR_BGR2RGB))
    file = image
    show(image)    
    
    
    
def gaussian():
    
    global file,label,button_click
    
    if button_click==True:
        label.grid_remove()
        button_click=False
        
    blur = cv2.GaussianBlur(cv2.cvtColor(cv2.imread(image_path), cv2.COLOR_BGR2RGB), (15, 15), 0)
    blur = Image.fromarray(blur)
    file = blur
    show(blur)

    
    
def negative():
    
    global file,label,button_click
    
    if button_click==True:
        label.grid_remove()
        button_click=False
        
    img = Image.open(image_path)
    w,h=img.size
    
    for i in range(w):
        for j in range(h):
            r,g,b=img.getpixel((i,j))
            r=255-r
            g=255-g
            b=255-b
            img.putpixel((i,j),(r,g,b))
            
    file = img        
    show(img)




def original():

    image = cv2.imread(image_path)
    original_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    inv = Image.fromarray(original_image)
    show(original_image)

    
    
master = Tk()
master.title('Photo_filter_GUI')
master.maxsize(1200, 800)

frame_l = Frame(master, width=200, height= 400, bg='white')
frame_l.grid(row=0, column=0, padx=50, pady=50)

image1=Image.open('input_1.png')
ip=ImageTk.PhotoImage(image1)
Label(frame_l, image=ip, bg='black').grid(row=0, column=0, padx=10, pady=10)

tool = Frame(frame_l, width=180, height=180, bg='white')
tool.grid(row=3, column=0, padx=5, pady=5)

frame_r= Frame(master, width=420, height=420, bg='white')
frame_r.grid(row=0, column=1, padx=50, pady=50)

Label(master, text="Output",font=('Arial','11',"bold")).grid(row=0, column=1,sticky=N,padx=5, pady=35)
Label(tool, text="Filters",font=('Arial','11',"bold"),bg="white",fg="black").grid(row=0, column=0, padx=5, pady=5)



Button(frame_l, text="Select Image", command=select, width=20
       ,font=('Arial','12'),bg="orange",fg="black").grid(row=1, column=0, padx=5, pady=5)
Button(frame_l, text="Save", command=save, width=20
       ,font=('Arial','12'),bg="orange",fg="black").grid(row=2, column=0, padx=5, pady=5)

Button(tool, text="Grayscale", command=grayscale, width=20,font=('Arial','12')).grid(row=1, column=0)
Button(tool, text="Sepia Effect", command=sepia, width=20,font=('Arial','12')).grid(row=2, column=0)
Button(tool, text="Gaussian Blur", command=gaussian, width=20,font=('Arial','12')).grid(row=3, column=0)
Button(tool, text="Negative Image", command=negative, width=20,font=('Arial','12')).grid(row=4, column=0)
Button(tool, text="Face Detection", command=detect_face, width=20
       ,font=('Arial','12'),bg="silver").grid(row=5, column=0)
Button(tool, text="Background Remove", command=remove , width=20
       ,font=('Arial','12'),bg="silver").grid(row=6, column=0)


mainloop()


# In[ ]:




